# This is the base configuration file for the JATOS. It is packed in JATOS' jar.
# To config JATOS individually use jatos.conf.
# ~~~~~

# General config
# ~~~~~
play.i18n.langs = ["en", "en-US"]


# JATOS' configuration
jatos {

  # Host address and port
  # Default are 0.0.0.0 and 9000
  http {
    address = "0.0.0.0"
    address = ${?play.server.http.address}
    address = ${?http.address}
    address = ${?JATOS_HTTP_ADDRESS}

    port = 9000
    port = ${?play.server.http.port}
    port = ${?http.port}
    port = ${?JATOS_HTTP_PORT}
  }

  # Secret needed for session cookie encryption. The GENERATED_SECRET is written by the loader.sh. The order of
  # precedence is: GENERATED_SECRET, JATOS_SECRET, jatos.secret, and play.http.secret.key (last one is highest).
  secret = ${?GENERATED_SECRET}
  secret = ${?JATOS_SECRET}

  # Add a base URL to the root of the application path (default is "/")
  urlBasePath = "/"
  urlBasePath = ${?JATOS_URL_BASE_PATH}

  # JATOS' study assets root directory path
  # Default is ./study_assets_root
  # Can be set by env variable JATOS_STUDY_ASSETS_ROOT_PATH or via command line args
  studyAssetsRootPath = "study_assets_root"
  studyAssetsRootPath = ${?JATOS_STUDY_ASSETS_ROOT_PATH}

  studyLogs.enabled = true
  # Path where JATOS stores its logs for each study
  # Default is ./study_logs
  # Can be set by env variable JATOS_STUDY_LOGS_PATH or via command line args
  studyLogs.path = "study_logs"
  studyLogs.path = ${?JATOS_STUDY_LOGS_PATH}

  resultUploads.enabled = true
  # Path where JATOS stores uploads from study runs
  # Default is ./result_uploads
  # Can be set by env variable JATOS_RESULT_UPLOADS_PATH or via command line args
  resultUploads.path = "result_uploads"
  resultUploads.path = ${?JATOS_RESULT_UPLOADS_PATH}
  # Max file size
  resultUploads.maxFileSize = 30MB
  resultUploads.maxFileSize = ${?JATOS_RESULT_UPLOADS_MAX_FILE_SIZE}
  # Limit of all files per study run
  resultUploads.limitPerStudyRun = 50MB
  resultUploads.limitPerStudyRun = ${?JATOS_RESULT_UPLOADS_LIMIT_PER_STUDY_RUN}

  # Max size of result data of one component result
  resultData.maxSize = 5MB

  # Maximal number of results to be fetched from the DB at once
  maxResultsDbQuerySize = 1000

  # User session configuration: timeout in minutes
  userSession.timeout = 1440
  # User session configuration: timeout after inactivity in minutes
  userSession.inactivity = 60
  # If true, the user has the possibility (a checkbox on the GUI's signin page) to keep the user session and to not get
  # signed out automatically due to user a session timeout (neither through normal timeout nor inactivity). If set to true
  # and the user chooses to keep being signed in, the user session is kept until the user signs out manually or the
  # session cookie is deleted. Default is true.
  userSession.allowKeepSignedin = true

  # Password length restriction
  user.password.length = 7
  # Password strength: one of the following
  #   0: No restrictions on characters
  #   1: At least one Latin letter and one number
  #   2: At least one Latin letter, one number and one special character (#?!@$%^&*-)
  #   3: At least one uppercase Latin letter, one lowercase Latin letter, one number and one special character (#?!@$%^&*-)
  user.password.strength = 0

  user.authentication.ldap {
    # LDAP url (e.g. "ldap://ldap.forumsys.com:389")
    url = ""
    # The name of the attribute used to identify the user, e.g 'uid' or 'cn'
    userAttribute = "uid"
    # LDAP base DN(s) (distinguished name)
    # Can be one DN with a single string (e.g. "ou=students,dc=example,dc=com") or a list of DNs
    # (e.g. ["ou=students,dc=example,dc=com", "ou=scientists,dc=example,dc=com"])
    basedn = ""
    # DN (distinguished name) of an admin user that has the right to search LDAP for other users
    admin.dn = ""
    # Password of the admin user
    admin.password = ""
    # Timout for waiting for response from LDAP server
    timeout = 5000
  }

  # Google OAuth client ID (https://developers.google.com/identity/sign-in/web/sign-in)
  user.authentication.oauth.googleClientId = ""

  # OpenID Connect (OIDC) authentication
  user.authentication.oidc {
    discoveryUrl = ""
    clientId = ""
    clientSecret = ""
    scope = ["openid"]
    usernameFrom = "subject"
    idTokenSigningAlgorithm = "RS256"
    signInButtonText = "Sign in with OIDC"
    signInButtonLogoUrl = "assets/lib/jatos-gui/images/OpenID_logo.svg"
    successFeedback = ""
  }

  # ORCID (orcid.org) authentication
  user.authentication.orcid {
    discoveryUrl = "https://orcid.org/.well-known/openid-configuration"
    clientId = ""
    clientSecret = ""
    scope = ["openid"]
    usernameFrom = "subject"
    idTokenSigningAlgorithm = "RS256"
    signInButtonText = "Sign in with ORCID"
    signInButtonLogoUrl = "assets/lib/jatos-gui/images/ORCIDiD_iconvector.svg"
    successFeedback = "You successfully connected your ORCID ID to JATOS."
  }

  # SURF SRAM (sram.surf.nl) authentication
  user.authentication.sram {
    discoveryUrl = "https://proxy.sram.surf.nl/.well-known/openid-configuration"
    clientId = ""
    clientSecret = ""
    scope = ["openid", "profile", "email", "voperson_external_id"]
    usernameFrom = "eduperson_principal_name"
    idTokenSigningAlgorithm = "RS256"
    signInButtonText = "Sign in with SRAM"
    signInButtonLogoUrl = "assets/lib/jatos-gui/images/surf.svg"
    successFeedback = "You successfully connected your SRAM ID to JATOS."
  }

  # SURFconext (surfconext.nl) authentication
  user.authentication.conext {
    discoveryUrl = "https://connect.surfconext.nl/.well-known/openid-configuration"
    clientId = ""
    clientSecret = ""
    scope = ["openid"]
    usernameFrom = "eduperson_principal_name"
    idTokenSigningAlgorithm = "RS256"
    signInButtonText = "Sign in with SURFconext"
    signInButtonLogoUrl = "assets/lib/jatos-gui/images/surf.svg"
    successFeedback = "You successfully connected your SURFconext ID to JATOS."
  }

  # Allow giving the role SUPERUSER to a user. This role allows a user to access ANY study as if they were
  # a study member (incl accessing result data or deleting the study)
  user.role.allowSuperuser = false

  # A message sent by the loader script after an update attempt
  update.msg = null
  update.msg = ${?JATOS_UPDATE_MSG}

  # JATOS ID cookies
  idCookies {
    # If true the ID cookie's 'secure' attribute is set (similar play.server.session.secure)
    secure = false

    # Defines the ID cookie's 'SameSite' attribute: 'None', 'Lax', or 'Strict'
    sameSite = ""

    # Max number of ID cookies
    limit = 10
  }

  # JATOS GUI - Show donations button in GUI
  donationAllowed = false

  # JATOS GUI - URL link to the 'terms of use' that will be shown in a info box on the home page
  # If empty it's not shown
  termsOfUseUrl = ""

  # JATOS GUI - URL to some static HTML that will be shown on the home page instead of the default welcome message.
  # If empty the default welcome message is shown.
  brandingUrl = ""

  # JATOS GUI - Allow to add all users that exist on this JATOS server to be added at once as members of a study
  studyMembers.allowAddAllUsers = false

  # JATOS GUI - Show certain columns in the study admin page. Sometimes the file system or the database is too slow
  # to calculate all this.
  studyAdmin.showStudyAssetsSize = true
  studyAdmin.showResultDataSize = false
  studyAdmin.showResultFileSize = false

  # JATOS API
  api.allowed = true

  # JATOS application log (not to be confused with the study log)
  logs {
    # Location in the file system. By default it's in JATOS' folder under 'logs'.
    path = ${play.server.dir}/logs
    path = ${?JATOS_LOGS_PATH}

    # Filename of the log files without suffix
    filename = "application"
    filename = ${?JATOS_LOGS_FILENAME}

    # Logback appender (one of ASYNCFILE, FILE, ASYNCSTDOUT, STDOUT)
    appender = "ASYNCFILE"
    appender = ${?JATOS_LOGS_APPENDER}
  }

  # Database configuration (default is H2)
  db {
    url = "jdbc:h2:./database/jatos;MODE=MYSQL;DATABASE_TO_UPPER=FALSE;IGNORECASE=TRUE;DEFAULT_LOCK_TIMEOUT=10000;SELECT_FOR_UPDATE_MVCC=FALSE"
    url = ${?JATOS_DB_URL}
    driver = "org.h2.Driver"
    driver = ${?JATOS_DB_DRIVER}
    username = null
    username = ${?JATOS_DB_USERNAME}
    password = null
    password = ${?JATOS_DB_PASSWORD}
  }

  # Number of database connections
  db.connectionPool.size = 100
  db.connectionPool.size = ${?JATOS_DB_CONNECTIONPOOL_SIZE}

  # Number of threads in JATOS thread pool
  threadPool.size = 150
  threadPool.size = ${?JATOS_THREADPOOL_SIZE}

  # Path to JATOS' tmp directory. E.g. used to temporarily store studies during import.
  tmpPath = null
  tmpPath = ${?JATOS_TMP_PATH}

  # True indicates that this JATOS runs in a cluster with other JATOS nodes.
  multiNode = false

  # Sets the locale for use in the GUI, e.g. "en-GB". If not set the browser's locale (as set in 'navigator.language') is used.
  locale = ""

  # File extension of JATOS study archive files
  studyArchive.suffix = "jzip"

  # File extension of JATOS results archive files
  resultsArchive.suffix = "zip"
}


# HTTP server config
# ~~~~~
play.server {
  http.address = ${jatos.http.address}
  http.port = ${jatos.http.port}

  # The time after which an idle connection will be automatically closed.
  # Set to `infinite` to completely disable idle connection timeouts.
  http.idleTimeout = infinite

  # How long a request takes until it times out. Set to null or "infinite" to disable the timeout.
  akka.requestTimeout = infinite
}


play.http {
  context = ${jatos.urlBasePath}

  errorHandler = "general.ErrorHandler"

  # File upload
  parser.maxDiskBuffer = 2048MB

  # Request body size
  parser.maxMemoryBuffer = 2048MB

  # Secure session cookie (set true to restrict user access to HTTPS)
  session.secure = false
}


# Make all properties here available in logback
# ~~~~~
play.logger.includeConfigProperties = true


# Play module configuration
# ~~~~~
play.modules {

  # JATOS has its own Jackson JSON ObjectMapper
  disabled += "play.core.ObjectMapperModule"

  # Guice config (dependency injection)
  enabled += "general.GuiceModule"
  enabled += "general.common.CommonGuiceModule"
  enabled += "general.publix.PublixGuiceModule"
}

# Database configuration
# ~~~~~
db {
  default.url = ${jatos.db.url}
  default.driver = ${jatos.db.driver}
  default.jndiName = "DefaultDS"
  default.username = ${jatos.db.username}
  default.password = ${jatos.db.password}
}
# JATOS uses Hibernate ORM
jpa {
  default = "mysqlPersistenceUnit"
}
# Set Hikari database connection pool to fixed size
play.db {
  prototype {
    hikaricp.minimumIdle = ${jatos.db.connectionPool.size}
    hikaricp.maximumPoolSize = ${jatos.db.connectionPool.size}
  }
}
# JATOS uses Play's Evolutions for auto DB evolution
play.evolutions {
  enabled = true
  autoApply = true
  useLocks = ${jatos.multiNode}
}


# Play's thread pool
# ~~~~~
# We use a fixed thread pool since most endpoints use blocking database calls.
akka {
  actor {
    default-dispatcher {
      executor = "thread-pool-executor"
      throughput = 1
      thread-pool-executor {
        fixed-pool-size = ${jatos.threadPool.size}
      }
    }
  }
}


# Play's application secret
# The loader.sh/.bat generate a secret the first time JATOS starts. So usually there is no need to set it manually.
# ~~~~~
play.http.secret.key = ${?jatos.secret}


# Akka configuration
# ~~~~~
akka {
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
}


# Filter configuration
# https://github.com/techmonad/play-cors-example/blob/master/conf/application.conf
# ~~~~~
play.filters {
  #enabled += play.filters.gzip.GzipFilter
  enabled += play.filters.csp.CSPFilter
  enabled += play.filters.cors.CORSFilter
  enabled += play.filters.csrf.CSRFFilter

  csp.directives {
    base-uri = "'self'"
  }

  # Bypass requests with 'Authorization' headers used by API in CSRF filter
  csrf.header.bypassHeaders {
    Authorization = "*"
  }

  csp.nonce {
    # Use nonce value (generated and passed in through request attribute)
    enabled = true

    # Pattern to use to replace with nonce
    pattern = "%CSP_NONCE_PATTERN%"

    # Add the nonce to "X-Content-Security-Policy-Nonce" header.  This is useful for debugging.
    header = false
  }

  cors {
    exposedHeaders = ["Content-Disposition"]
  }

  hosts {
    allowed = ["localhost", "."]
  }

  # Security headers filter configuration
  headers {
    # The X-Frame-Options header
    frameOptions = "SAMEORIGIN"

    # Default is 'nosniff' - but we have to allow content-type sniffing for the study assets
    contentTypeOptions = null
  }
}


# Play's assets configuration
# ~~~~~
play.assets.cache."/public/lib/jatos-publix/javascripts/"="private"