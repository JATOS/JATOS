openapi: 3.0.4
info:
  title: JATOS API
  description: This is the JATOS API specification using OpenAPI.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
externalDocs:
  description: Find out more about JATOS
  url: https://www.jatos.org
servers:
  - url: http://localhost:9000
  - url: https://cortex.jatos.org
paths:
  /jatos/api/v1/admin/status:
    get:
      summary: Get the status of your JATOS (for admin tokens only)
      tags:
        - admin
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Invalid token
  /jatos/api/v1/admin/token:
    get:
      summary: Get details of the token used in this request
      tags:
        - admin
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Invalid token
  /jatos/api/v1/admin/logs/{filename}:
    get:
      summary: Get a log file (application logs - not study logs)
      description: Works only with admin tokens
      tags:
        - admin
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: >-
            Filename of the log file (e.g. application.log, loader.log,
            update.log)
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
  /jatos/api/v1/study:
    post:
      summary: Import a study
      description: >-
        Import a study in the JATOS study archive file format (*.jzip* suffix).
        You can set several flags in the query parameters to specify how eventual
        existing studies with the same UUID should be handled (e.g keep or
        overwrite their properties and/or assets).
      tags:
        - study
      parameters:
        - in: query
          name: keepProperties
          schema:
            type: boolean
            default: false
          description: >-
            If the study exists already in JATOS, should the current properties
            be kept? Default is `false` (properties are overwritten by default).
            If `true` the current properties are kept. If the study doesn't
            already exist this parameter has no effect.
        - in: query
          name: keepAssets
          schema:
            type: boolean
            default: false
          description: >-
            If the study exists already in JATOS, should the current assets
            directory be kept? Default is `false` (assets are overwritten by
            default). If the study doesn't already exist this parameter has no
            effect.
        - in: query
          name: keepCurrentAssetsName
          schema:
            type: boolean
            default: true
          description: >-
            If the assets are going to be overwritten (`keepAssets=false`), this
            flag indicates if the assets directory name is taken form the
            current or the uploaded one. In the common case that both names are
            the same this has no effect. But if the current asset directory name
            is different from the uploaded one a `keepCurrentAssetsName=true`
            indicates that the name of the currently installed assets directory
            should be kept. A `false` indicates that the name should be taken
            from the uploaded one. Default is `true`.
        - in: query
          name: renameAssets
          schema:
            type: boolean
            default: true
          description: >-
            If the study assets directory already exists in JATOS but belongs to
            a different study it cannot be overwritten. In this case you can set
            `renameAssets=true` to let JATOS add a suffix to the assets
            directory name (original name + "_" + a number). Default is `true`.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                study:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Invalid token
  /jatos/api/v1/studies/{id}:
    get:
      summary: Export a study
      description: >-
        Export a study by specifying its ID or UUID. The exported study will be in the
        JATOS study archive file format with a *.jzip* suffix.
      tags:
        - study
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
      responses:
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
    delete:
      summary: Delete a study
      description: >-
        Delete a study including the study's results and assets by specifying its ID or UUID.
      tags:
        - danger zone
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
      responses:
        '200':
          description: Success
        '401':
          description: Invalid token
  /jatos/api/v1/studies/{id}/properties:
    get:
      summary: Get study properties
      description: >-
        Get the study properties by specifying a study ID or UUID. The
        properties of the study's components can be included by setting the flag
        `withComponentProperties`. The batch properties can be included by
        setting the flag `withBatchProperties`. If no study ID or UUID is
        specified the study properties of **all** studies that you can access
        will be returned.
      tags:
        - study
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
        - in: query
          name: withComponentProperties
          allowEmptyValue: true
          schema:
            type: boolean
            default: false
          description: >-
            Flag, if set to `true` the data will additionally contain the
            properties of the study's component.
        - in: query
          name: withBatchProperties
          allowEmptyValue: true
          schema:
            type: boolean
            default: false
          description: >-
            Flag, if set to `true` the data will additionally contain the
            properties of the batches that belong to this study.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Invalid token
  /jatos/api/v1/studies/properties:
    get:
      summary: Get all study properties that are accessible to the user
      description: >-
        The properties of the study's components can be included by setting the
        flag `withComponentProperties`. The batch properties can be included by
        setting the flag `withBatchProperties`.
      tags:
        - study
      parameters:
        - in: query
          name: withComponentProperties
          allowEmptyValue: true
          schema:
            type: boolean
            default: false
          description: >-
            Flag, if set to `true` the data will additionally contain the
            properties of the study's component.
        - in: query
          name: withBatchProperties
          allowEmptyValue: true
          schema:
            type: boolean
            default: false
          description: >-
            Flag, if set to `true` the data will additionally contain the
            properties of the batches that belong to this study.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Invalid token
  /jatos/api/v1/studies/{id}/assets/structure:
    get:
      summary: Get the directory structure of a study assets directory in JSON
      description: (since v3.8.2) Every element has `name` (filename), `path` (location in the study assets), `type` (_file_ or _directory_), `creation` (creation timestamp), `lastModified` (last modification timestamp), `size` (file size), `checksum` (checksum of the file calculated with Adler32)
      tags:
        - study
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
        - in: query
          name: flatten
          allowEmptyValue: true
          schema:
            type: boolean
            default: false
          description: >-
            Flag, if set to `true` the returned JSON will be a flat list of
            files (no tree, no directories). If `false`, the returned JSON
            will have tree-like structure and include directories. Default
            is `false`.
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
  /jatos/api/v1/studies/{id}/assets/{filepath}:
    get:
      summary: Download a file from the study assets
      tags:
        - study
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
        - in: path
          name: filepath
          required: true
          schema:
            type: string
          description: >-
            Filepath to the file. Directories cannot be downloaded. The path can
            be URL encoded but doesn't have to be.
          examples:
            top-level:
              value: logo.png
              summary: Get a file
              description: >-
                Downloads the file *logo.png* from the top-level of the study
                assets directory.
            subdirectory:
              value: images/logo.png
              summary: Get a file from a subdirectory
              description: >-
                Downloads the file *logo.png* from the *images* subdirectory of
                the study assets directory.
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
    post:
      summary: Upload a file to the study assets
      tags:
        - study
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
        - in: path
          name: filepath
          required: true
          schema:
            type: string
          description: >-
            Filepath to the file. Subdirectories are allowed and it can
            additionally rename the file (see examples). If it is just '.' the
            file will be saved at the top-level of the study assets directory.
            The path can be URL encoded but doesn't have to be. Non-existing
            subdirectories will be created. Existing files will be overwritten.
          examples:
            top-level:
              value: .
              summary: Save in the top-level of the study assets directory
              description: >-
                The filepath will be ignored and the uploaded file be saved in
                the top-level of the study assets directory.
            subdirectory:
              value: images/
              summary: Save in a subdirectory
              description: >-
                Saves the file in the subdirectory *images* of the study assets
                directory. If the subdirectory does not exist it will be
                created.
            changeFilename:
              value: images/newFilename.png
              summary: Additionally rename file
              description: >-
                Additionally to saving the file in the subdirectory *images* it
                will be renamed to *newFilename.png*.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                studyAssetsFile:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success
        '401':
          description: Invalid token
    delete:
      summary: Delete a file from the study assets
      tags:
        - study
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
        - in: path
          name: filepath
          required: true
          schema:
            type: string
          description: >-
            Path to the file in the study assets directory that is supposed to
            be deleted. The path can be URL encoded but doesn't have to be.
            Directories won't be deleted.
          examples:
            top-level:
              value: logo.png
              summary: Deletes a file
              description: >-
                Deletes the file *logo.png* in the top-level of the study assets
                directory.
            subdirectory:
              value: images/logo.png
              summary: Deletes a file in a subdirectory
              description: >-
                Deletes the file *logo.png* in the subdirectory *images* in the
                study assets directory.
      responses:
        '200':
          description: Success
        '401':
          description: Invalid token
  /jatos/api/v1/studies/{id}/log:
    get:
      summary: Get the study log of a study
      tags:
        - study
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
      responses:
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
  /jatos/api/v1/studies/{id}/studyCodes:
    get:
      summary: Get one or multiple study codes
      tags:
        - study
      parameters:
        - $ref: '#/components/parameters/StudyIdOrUuidParameter'
        - in: query
          name: type
          required: true
          schema:
            type: string
          description: >-
            Type - one of `PersonalSingle` (or `ps`), `PersonalMultiple` (or
            `pm`), `GeneralSingle` (or `gs`), `GeneralMultiple` (or `gm`),
            `MTurk` (or `mt`)
        - in: query
          name: batchId
          schema:
            type: integer
            minimum: 1
          description: >-
            ID of the batch to which the study codes should belong to. If not
            set the default batch is used.
        - in: query
          name: comment
          schema:
            type: string
          description: >-
            Some identifying description or name (only for type `PersonalSingle`
            or `PersonalMultiple`). Can be left empty.
        - in: query
          name: amount
          schema:
            type: integer
          description: >-
            Number of study codes to be created (only for type `PersonalSingle`
            or `PersonalMultiple`). Default is 1.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Invalid token
  /jatos/api/v1/results:
    post:
      summary: Get results (combined with metadata, data, and files)
      description: >-
        Select results by specifying one or multiple of: study IDs/UUIDs,
        component IDs/UUIDs, batch IDs, group IDs, study result IDs, and
        component result IDs. You can use either **query parameters** or **JSON
        posted in the body**. Posting JSON is more flexible since it allows you
        to use single IDs, list of IDs, ranges, or a combination of all three.
        If one of the specified results does not exist or you have no permission
        to access it this result will simply be left out and no error will be
        raised. The results will be packed in an JATOS results archive with an
        *.jrzip* suffix.
      tags:
        - results
      parameters:
        - $ref: '#/components/parameters/StudyIdParameter'
        - $ref: '#/components/parameters/StudyUuidParameter'
        - $ref: '#/components/parameters/ComponentIdParameter'
        - $ref: '#/components/parameters/ComponentUuidParameter'
        - $ref: '#/components/parameters/StudyResultIdParameter'
        - $ref: '#/components/parameters/ComponentResultIdParameter'
        - $ref: '#/components/parameters/BatchIdParameter'
        - $ref: '#/components/parameters/GroupIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ResultIdsJsonBody'
      responses:
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
  /jatos/api/v1/results/metadata:
    post:
      summary: Get result metadata in JSON
      description: >-
        Select results by specifying one or multiple of: study IDs/UUIDs,
        component IDs/UUIDs, batch IDs, group IDs, study result IDs, and
        component result IDs. You can use either **query parameters** or **JSON
        posted in the body**. Posting JSON is more flexible since it allows you
        to use single IDs, list of IDs, ranges, or a combination of all three.
        If one of the specified results does not exist or you have no permission
        to access it this result will simply be left out and no error will be
        raised. The metadata will be returned in JSON format.
      tags:
        - results
      parameters:
        - $ref: '#/components/parameters/StudyIdParameter'
        - $ref: '#/components/parameters/StudyUuidParameter'
        - $ref: '#/components/parameters/ComponentIdParameter'
        - $ref: '#/components/parameters/ComponentUuidParameter'
        - $ref: '#/components/parameters/StudyResultIdParameter'
        - $ref: '#/components/parameters/ComponentResultIdParameter'
        - $ref: '#/components/parameters/BatchIdParameter'
        - $ref: '#/components/parameters/GroupIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ResultIdsJsonBody'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
  /jatos/api/v1/results/data:
    post:
      summary: Get only the data of results
      description: >-
        Select results by specifying one or multiple of: study IDs/UUIDs,
        component IDs/UUIDs, batch IDs, group IDs, study result IDs, and
        component result IDs. You can use either **query parameters** or **JSON
        posted in the body**. Posting JSON is more flexible since it allows you
        to use single IDs, list of IDs, ranges, or a combination of all three.
        If one of the specified results does not exist or you have no permission
        to access it this result will simply be left out and no error will be
        raised. The results will be packed in an ZIP archive with an *.jrzip*
        suffix.
      tags:
        - results
      parameters:
        - $ref: '#/components/parameters/StudyIdParameter'
        - $ref: '#/components/parameters/StudyUuidParameter'
        - $ref: '#/components/parameters/ComponentIdParameter'
        - $ref: '#/components/parameters/ComponentUuidParameter'
        - $ref: '#/components/parameters/StudyResultIdParameter'
        - $ref: '#/components/parameters/ComponentResultIdParameter'
        - $ref: '#/components/parameters/BatchIdParameter'
        - $ref: '#/components/parameters/GroupIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ResultIdsJsonBody'
      responses:
        '200':
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
  /jatos/api/v1/results/files:
    post:
      summary: Get only the files of results
      description: >-
        Select results by specifying one or multiple of: study IDs/UUIDs,
        component IDs/UUIDs, batch IDs, group IDs, study result IDs, and
        component result IDs. You can use either **query parameters** or **JSON
        posted in the body**. Posting JSON is more flexible since it allows you
        to use single IDs, list of IDs, ranges, or a combination of all three.
        If one of the specified results does not exist or you have no permission
        to access it this result will simply be left out and no error will be
        raised. The results will be packed in an ZIP archive with an *.jrzip*
        suffix.
      tags:
        - results
      parameters:
        - $ref: '#/components/parameters/StudyIdParameter'
        - $ref: '#/components/parameters/StudyUuidParameter'
        - $ref: '#/components/parameters/ComponentIdParameter'
        - $ref: '#/components/parameters/ComponentUuidParameter'
        - $ref: '#/components/parameters/StudyResultIdParameter'
        - $ref: '#/components/parameters/ComponentResultIdParameter'
        - $ref: '#/components/parameters/BatchIdParameter'
        - $ref: '#/components/parameters/GroupIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ResultIdsJsonBody'
      responses:
        '200':
          description: Success
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
  /jatos/api/v1/results/files/{filename}:
    get:
      summary: Get a single result file
      tags:
        - results
      parameters:
        - in: query
          name: componentResultId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Component result ID
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: Name of the file to be fetched
      responses:
        '200':
          description: Success
          content:
            '*':
              schema:
                type: string
                format: binary
        '401':
          description: Invalid token
  /jatos/api/v1/results/delete:
    put:
      summary: Delete results
      description: >-
        **Delete results (including data, metadata and files)** by specifying
        one or multiple of: study IDs/UUIDs, component IDs/UUIDs, batch IDs,
        group IDs, study result IDs, and component result IDs. You can  use
        either **query parameters** or **JSON posted in the body**. Posting JSON
        is more flexible since it allows you to use single IDs, list of IDs,
        ranges, or a combination of all three. If one of the specified results
        does not exist or you have no permission to access it this result will
        simply be left out and no error will be raised. Empty study results will
        be deleted too. **Only results will be deleted, studies, components,
        batches, and groups remain untouched**. **This cannot be undone**.
      tags:
        - danger zone
      parameters:
        - $ref: '#/components/parameters/StudyIdParameter'
        - $ref: '#/components/parameters/StudyUuidParameter'
        - $ref: '#/components/parameters/ComponentIdParameter'
        - $ref: '#/components/parameters/ComponentUuidParameter'
        - $ref: '#/components/parameters/StudyResultIdParameter'
        - $ref: '#/components/parameters/ComponentResultIdParameter'
        - $ref: '#/components/parameters/BatchIdParameter'
        - $ref: '#/components/parameters/GroupIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/ResultIdsJsonBody'
      responses:
        '200':
          description: Success
        '401':
          description: Invalid token
security:
  - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  parameters:
    StudyIdOrUuidParameter:
      in: path
      name: id
      required: true
      schema:
        type: string
      description: Either a study ID or a study UUID
    StudyIdParameter:
      in: query
      name: studyId
      schema:
        type: integer
      description: >-
        Specify results with a study ID. This query parameter can be used
        multiple times.
    StudyUuidParameter:
      in: query
      name: studyUuid
      schema:
        type: string
      description: >-
        Specify results with a study UUID. This query parameter can be used
        multiple times.
    ComponentIdParameter:
      in: query
      name: componentId
      schema:
        type: integer
      description: >-
        Specify results with a component ID. This query parameter can be used
        multiple times.
    ComponentUuidParameter:
      in: query
      name: componentUuid
      schema:
        type: string
      description: >-
        Specify results with a component UUID. This query parameter can be used
        multiple times.
    StudyResultIdParameter:
      in: query
      name: studyResultId
      schema:
        type: integer
      description: >-
        Specify results with a study result ID. This query parameter can be used
        multiple times.
    ComponentResultIdParameter:
      in: query
      name: componentResultId
      schema:
        type: integer
      description: >-
        Specify results with a component result ID. This query parameter can be
        used multiple times.
    BatchIdParameter:
      in: query
      name: batchId
      schema:
        type: integer
      description: >-
        Specify results with a batch ID. This query parameter can be used
        multiple times.
    GroupIdParameter:
      in: query
      name: groupId
      schema:
        type: integer
      description: >-
        Specify results with a group ID. This query parameter can be used
        multiple times.
  requestBodies:
    ResultIdsJsonBody:
      content:
        text/plain: {}
        application/json:
          schema:
            type: object
            properties:
              studyIds:
                oneOf:
                  - type: array
                    items:
                      type: integer
                  - type: integer
                  - type: string
              studyUuids:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: string
              componentIds:
                oneOf:
                  - type: array
                    items:
                      type: integer
                  - type: integer
                  - type: string
              componentUuids:
                oneOf:
                  - type: array
                    items:
                      type: string
                  - type: string
              componentResultIds:
                oneOf:
                  - type: array
                    items:
                      type: integer
                  - type: integer
                  - type: string
              studyResultIds:
                oneOf:
                  - type: array
                    items:
                      type: integer
                  - type: integer
                  - type: string
              batchIds:
                oneOf:
                  - type: array
                    items:
                      type: integer
                  - type: integer
                  - type: string
              groupIds:
                oneOf:
                  - type: array
                    items:
                      type: integer
                  - type: integer
                  - type: string
          examples:
            studyIds:
              summary: Study ID
              value:
                studyIds: 1
            studyUuids:
              summary: Study UUID
              value:
                studyIds: 11111111-1111-1111-1111-111111111111
            componentIds:
              summary: Component ID
              value:
                studyIds: 1
            componentUuids:
              summary: Component UUID
              value:
                studyIds: 11111111-1111-1111-1111-111111111111
            listOfComponentIds:
              summary: Multiple component IDs
              value:
                componentIds:
                  - 1
                  - 2
                  - 3
            listOfComponentUuids:
              summary: Multiple component UUIDs
              value:
                componentUuids:
                  - 11111111-1111-1111-1111-111111111111
                  - 22222222-2222-2222-2222-222222222222
                  - 33333333-3333-3333-3333-333333333333
            batchIds:
              summary: Batch ID
              value:
                batchIds: 1
            groupIds:
              summary: Group ID
              value:
                batchIds: 1
            listOfComponentResultIds:
              summary: Multiple component result IDs
              value:
                componentResultIds:
                  - 1
                  - 2
                  - 3
            rangeOfComponentResultIds:
              summary: Range of component result IDs
              value:
                componentResultIds: 1-10
            mixOfComponentResultIds:
              summary: Mix of ranges and single component result IDs
              value:
                componentResultIds: 1-10, 12, 15, 20-30
            listOfStudyResultIds:
              summary: Multiple study result IDs
              value:
                studyResultIds:
                  - 1
                  - 2
                  - 3
            rangeOfStudyResultIds:
              summary: Range of Study result IDs
              value:
                studyResultIds: 1-10
            mixOfStudyResultIds:
              summary: Mix of ranges and single study result IDs
              value:
                studyResultIds: 1-10, 12, 15, 20-30
            combinationOfAll:
              summary: All
              value:
                studyIds: null
                studyUuids: null
                componentIds: null
                componentUuids: null
                componentResultIds: null
                studyResultIds: null
                batchIds: null
                groupIds: null