# Routes
# This file defines all routes for JATOS' GUI (Higher priority routes first)
# Order is important!
# ~~~~

# API admin
GET      /jatos/api/v1/admin/token                                          @controllers.gui.Api.testToken()
GET      /jatos/api/v1/admin/status                                         @controllers.gui.Api.status()
GET      /jatos/api/v1/admin/logs/:filename                                 @controllers.gui.Api.logs(filename)

# API study
GET      /jatos/api/v1/studies/properties                                   @controllers.gui.Api.getAllStudyPropertiesByUser(withComponentProperties: Boolean ?= false, withBatchProperties: Boolean ?= false)
GET      /jatos/api/v1/studies/:id/properties                               @controllers.gui.Api.getStudyProperties(id, withComponentProperties: Boolean ?= false, withBatchProperties: Boolean ?= false)
GET      /jatos/api/v1/studies/:id/log                                      @controllers.gui.Api.studyLog(id, entryLimit: Integer ?= -1, download: Boolean ?= true)
GET      /jatos/api/v1/studies/:id/studyCodes                               @controllers.gui.Api.getStudyCodes(id, batchId: Option[java.lang.Long], type, comment ?= null, amount: Integer ?= 1)
GET      /jatos/api/v1/studies/:id                                          @controllers.gui.Api.exportStudy(id)
DELETE   /jatos/api/v1/studies/:id                                          @controllers.gui.Api.deleteStudy(id)
POST     /jatos/api/v1/study                                                @controllers.gui.Api.importStudy(request: Request, keepProperties: Boolean ?= false, keepAssets: Boolean ?= false, keepCurrentAssetsName: Boolean ?= true, renameAssets: Boolean ?= true)
GET      /jatos/api/v1/studies/:id/assets/structure                         @controllers.gui.Api.getStudyAssetsStructure(id, flatten: Boolean ?= false)
GET      /jatos/api/v1/studies/:id/assets/*filepath                         @controllers.gui.Api.downloadStudyAssetsFile(id, filepath)
POST     /jatos/api/v1/studies/:id/assets/                                  @controllers.gui.Api.uploadStudyAssetsFile(request: Request, id, filepath = null)
POST     /jatos/api/v1/studies/:id/assets/*filepath                         @controllers.gui.Api.uploadStudyAssetsFile(request: Request, id, filepath)
DELETE   /jatos/api/v1/studies/:id/assets/*filepath                         @controllers.gui.Api.deleteStudyAssetsFile(id, filepath)

# API results
GET      /jatos/api/v1/results                                              @controllers.gui.Api.exportResults(request: Request, isApiCall: Boolean ?= true)
POST     /jatos/api/v1/results                                              @controllers.gui.Api.exportResults(request: Request, isApiCall: Boolean ?= true)
GET      /jatos/api/v1/results/metadata                                     @controllers.gui.Api.exportResultMetadata(request: Request, isApiCall: Boolean ?= true)
POST     /jatos/api/v1/results/metadata                                     @controllers.gui.Api.exportResultMetadata(request: Request, isApiCall: Boolean ?= true)
GET      /jatos/api/v1/results/data                                         @controllers.gui.Api.exportResultData(request: Request, asPlainText: Boolean ?= false, isApiCall: Boolean ?= true)
POST     /jatos/api/v1/results/data                                         @controllers.gui.Api.exportResultData(request: Request, asPlainText: Boolean ?= false, isApiCall: Boolean ?= true)
GET      /jatos/api/v1/results/files                                        @controllers.gui.Api.exportResultFiles(request: Request)
POST     /jatos/api/v1/results/files                                        @controllers.gui.Api.exportResultFiles(request: Request)
GET      /jatos/api/v1/results/files/:filename                              @controllers.gui.Api.exportSingleResultFile(componentResultId: Long, filename)
PUT      /jatos/api/v1/results/delete                                       @controllers.gui.Api.removeResults(request: Request)


# Admin controller
GET      /jatos/admin                                                       @controllers.gui.Admin.administration(request: Request)
GET      /jatos/status                                                      @controllers.gui.Admin.status()
GET      /jatos/studyManager                                                @controllers.gui.Admin.studyManager(request: Request)
GET      /jatos/allStudiesData                                              @controllers.gui.Admin.allStudiesData()
GET      /jatos/studiesData                                                 @controllers.gui.Admin.studiesDataByUser(username)
GET      /jatos/listLogs                                                    @controllers.gui.Admin.listLogs()
GET      /jatos/log                                                         @controllers.gui.Admin.log(limit: Integer ?= -1)
GET      /jatos/logs/:filename                                              @controllers.gui.Admin.logs(filename, limit: Integer ?= -1, reverse: Boolean ?= false)
GET      /jatos/:studyId/studyAssetsSize                                    @controllers.gui.Admin.studyAssetsSize(studyId: Long)
GET      /jatos/:studyId/resultDataSize                                     @controllers.gui.Admin.resultDataSize(studyId: Long)
GET      /jatos/:studyId/resultFileSize                                     @controllers.gui.Admin.resultFileSize(studyId: Long)

# Update controller
GET      /jatos/releaseInfo                                                 @controllers.gui.Updates.getReleaseInfo(version: String ?= null, allowPreReleases: Boolean ?= false)
GET      /jatos/cancelUpdate                                                @controllers.gui.Updates.cancelUpdate()
GET      /jatos/downloadJatos                                               @controllers.gui.Updates.downloadJatos(dry:Boolean ?= false)
GET      /jatos/updateAndRestart                                            @controllers.gui.Updates.updateAndRestart(backupAll: Boolean)

# Tests controller
GET      /jatos/testDatabase                                                @controllers.gui.Tests.testDatabase()
GET      /jatos/testFolderAccess                                            @controllers.gui.Tests.testFolderAccess()
GET      /jatos/testWebSocket                                               @controllers.gui.Tests.testWebSocket()

# Auth controllers
GET      /jatos/signin                                                      @auth.gui.Signin.signin(request: Request)
GET      /jatos/login                                                       @auth.gui.Signin.signin(request: Request)
POST     /jatos/signin/local                                                @auth.gui.Signin.authenticate(request: Request)
+ nocsrf
POST     /jatos/signin/google                                               @auth.gui.SigninGoogle.signin(request: Request)
GET      /jatos/signin/oidc/basic                                           @auth.gui.SigninBasicOidc.signin(request: Request, realHostUrl: String, keepSignedin: Boolean)
GET      /jatos/signin/oidc/basic/callback                                  @auth.gui.SigninBasicOidc.callback(request: Request)
GET      /jatos/signin/oidc/orcid                                           @auth.gui.SigninOrcid.signin(request: Request, realHostUrl: String, keepSignedin: Boolean)
GET      /jatos/signin/oidc/orcid/callback                                  @auth.gui.SigninOrcid.callback(request: Request)
GET      /jatos/signin/oidc/sram                                            @auth.gui.SigninSram.signin(request: Request, realHostUrl: String, keepSignedin: Boolean)
GET      /jatos/signin/oidc/sram/callback                                   @auth.gui.SigninSram.callback(request: Request)
GET      /jatos/signout                                                     @auth.gui.Signin.signout(request: Request)


# Home controller
GET      /jatos/sidebarData                                                 @controllers.gui.Home.sidebarData()
GET      /jatos                                                             @controllers.gui.Home.home(request: Request)
GET      /jatos/                                                            @controllers.gui.Home.home(request: Request)
GET      /                                                                  @controllers.gui.Home.home(request: Request)
GET      /jatos/branding                                                    @controllers.gui.Home.branding()

# ApiTokens controller
GET      /jatos/user/allApiTokenData                                        @auth.gui.ApiTokens.allTokenDataByUser()
POST     /jatos/user/apiToken                                               @auth.gui.ApiTokens.generate(name, expires: Integer)
DELETE   /jatos/user/apiToken/:id                                           @auth.gui.ApiTokens.remove(id: Long)
POST     /jatos/user/apiToken/:id/active                                    @auth.gui.ApiTokens.toggleActive(id: Long, active: Boolean)

# Users controller
GET      /jatos/userManager                                                 @controllers.gui.Users.userManager(request: Request)
POST     /jatos/user                                                        @controllers.gui.Users.create(request: Request)
POST     /jatos/user/:username/profile                                      @controllers.gui.Users.edit(username)
GET      /jatos/user/signedinUser                                           @controllers.gui.Users.signedinUserData()
GET      /jatos/user/allUserData                                            @controllers.gui.Users.allUserData()
POST     /jatos/user/passwordByUser                                         @controllers.gui.Users.changePasswordByUser(request: Request)
POST     /jatos/user/passwordByAdmin                                        @controllers.gui.Users.changePasswordByAdmin(request: Request)
POST     /jatos/user/:username/properties/role                              @controllers.gui.Users.toggleRole(username, role, value: Boolean)
POST     /jatos/user/:username/properties/active                            @controllers.gui.Users.toggleActive(username, active: Boolean)
# Play doesn't allow data in body in a DELETE request, so I use POST instead
POST     /jatos/user/:username/delete                                       @controllers.gui.Users.remove(username)

# ComponentResults & StudyResults controller
GET      /jatos/worker/:workerId/results                                    @controllers.gui.StudyResults.workersStudyResults(request: Request, workerId: Long)
GET      /jatos/worker/:workerId/tableData                                  @controllers.gui.StudyResults.tableDataByWorker(workerId: Long)
GET      /jatos/:studyId/batch/:batchId/results                             @controllers.gui.StudyResults.batchesStudyResults(request: Request, studyId: Long, batchId: Long, workerType ?= null)
GET      /jatos/batch/:batchId/tableData                                    @controllers.gui.StudyResults.tableDataByBatch(batchId: Long, workerType ?= null)
GET      /jatos/:studyId/group/:groupId/results                             @controllers.gui.StudyResults.groupsStudyResults(request: Request, studyId: Long, groupId: Long)
GET      /jatos/group/:groupId/tableData                                    @controllers.gui.StudyResults.tableDataByGroup(groupId: Long)
PUT      /jatos/studyResult/delete                                          @controllers.gui.StudyResults.remove(request: Request)
GET      /jatos/studyResult/:studyResultId/componentResults                 @controllers.gui.StudyResults.tableDataComponentResultsByStudyResult(studyResultId: Long)
GET      /jatos/componentResults/tableData                                  @controllers.gui.ComponentResults.tableDataByComponent(componentId: Long)
PUT      /jatos/componentResults/delete                                     @controllers.gui.ComponentResults.remove(request: Request)
GET      /jatos/componentResult/:componentResultId/data                     @controllers.gui.ComponentResults.exportSingleResultData(componentResultId: Long)
GET      /jatos/:studyId/:componentId/results                               @controllers.gui.ComponentResults.componentResults(request: Request, studyId: Long, componentId: Long)
GET      /jatos/:studyId/tableData                                          @controllers.gui.StudyResults.tableDataByStudy(studyId: Long)
GET      /jatos/:studyId/results                                            @controllers.gui.StudyResults.studysStudyResults(request: Request, studyId: Long)

# Studies controller
POST     /jatos/study                                                       @controllers.gui.Studies.submitCreated()
GET      /jatos/:studyId/properties                                         @controllers.gui.Studies.properties(studyId: Long)
POST     /jatos/:studyId/properties                                         @controllers.gui.Studies.submitEdited(studyId: Long)
POST     /jatos/:studyId/properties/description                             @controllers.gui.Studies.submitDescription(request: Request, studyId: Long)
POST     /jatos/:studyId/properties/active                                  @controllers.gui.Studies.toggleActive(studyId: Long, active: Boolean)
POST     /jatos/:studyId/memberUser                                         @controllers.gui.Studies.toggleMemberUser(studyId: Long, username, isMember: Boolean)
POST     /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.addAllMemberUsers(studyId: Long)
DELETE   /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.removeAllMemberUsers(studyId: Long)
GET      /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.memberUsers(studyId: Long)
POST     /jatos/:studyId/componentOrder                                     @controllers.gui.Studies.changeComponentOrder(studyId: Long, componentId: Long, newPosition)
GET      /jatos/:studyId/run                                                @controllers.gui.Studies.runStudy(request: Request, studyId: Long, batchId: Long ?= -1)
GET      /jatos/:studyId/clone                                              @controllers.gui.Studies.cloneStudy(studyId: Long)
POST     /jatos/:studyId/lock/toggle                                        @controllers.gui.Studies.toggleLock(studyId: Long)
GET      /jatos/:studyId/componentsTableData                                @controllers.gui.Studies.tableDataByStudy(studyId: Long)
GET      /jatos/:studyId                                                    @controllers.gui.Studies.study(request: Request, studyId: Long)
GET      /jatos/:studyId/                                                   @controllers.gui.Studies.study(request: Request, studyId: Long)

# Batches controller
GET      /jatos/:studyId/studyLinks                                         @controllers.gui.StudyLinks.studyLinks(request: Request, studyId: Long)
POST     /jatos/:studyId/batch                                              @controllers.gui.StudyLinks.submitCreatedBatch(request: Request, studyId: Long)
POST     /jatos/:studyId/batch/:batchId/properties/workerType/:workerType   @controllers.gui.StudyLinks.toggleAllowedWorkerType(studyId: Long, batchId: Long, workerType, allow: Boolean)
POST     /jatos/:studyId/batch/:batchId/properties/active                   @controllers.gui.StudyLinks.toggleBatchActive(studyId: Long, batchId: Long, active: Boolean)
GET      /jatos/:studyId/batch/:batchId/properties                          @controllers.gui.StudyLinks.batchProperties(studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/properties                          @controllers.gui.StudyLinks.submitEditedBatchProperties(request: Request, studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId/batchSessionData                    @controllers.gui.StudyLinks.batchSessionData(studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/batchSessionData                    @controllers.gui.StudyLinks.submitEditedBatchSessionData(request: Request, studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId/studyLinksSetupData                 @controllers.gui.StudyLinks.studyLinksSetupData(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId/studyLinksData                      @controllers.gui.StudyLinks.studyLinksData(studyId: Long, batchId: Long, workerType)
POST     /jatos/:studyId/batch/:batchId/studyLink/:studyCode                @controllers.gui.StudyLinks.toggleStudyLinkActive(studyId: Long, batchId: Long, studyCode, active: Boolean)
DELETE   /jatos/:studyId/batch/:batchId                                     @controllers.gui.StudyLinks.removeBatch(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId                                     @controllers.gui.StudyLinks.batchById(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batches                                            @controllers.gui.StudyLinks.batchesByStudy(studyId: Long)
GET      /jatos/:studyId/batch/:batchId/groups                              @controllers.gui.StudyLinks.groupsByBatch(studyId: Long, batchId: Long)
POST     /jatos/:studyId/group/:groupId/fixed                               @controllers.gui.StudyLinks.toggleGroupFixed(studyId: Long, groupId: Long, fixed: Boolean)
GET      /jatos/:studyId/group/:groupId/groupSessionData                    @controllers.gui.StudyLinks.groupSessionData(studyId: Long, groupId: Long)
POST     /jatos/:studyId/group/:groupId/groupSessionData                    @controllers.gui.StudyLinks.submitEditedGroupSessionData(request: Request, studyId: Long, groupId: Long)
POST     /jatos/worker/:workerId/comment                                    @controllers.gui.StudyLinks.editWorkerComment(request: Request, workerId: Long)

# Components controller
POST     /jatos/:studyId/component                                          @controllers.gui.Components.submitCreated(request: Request, studyId: Long)
POST     /jatos/:studyId/:componentId/properties/active                     @controllers.gui.Components.toggleActive(request: Request, studyId: Long, componentId: Long, active: Boolean)
GET      /jatos/:studyId/:componentId/properties                            @controllers.gui.Components.properties(studyId: Long, componentId: Long)
POST     /jatos/:studyId/:componentId/properties                            @controllers.gui.Components.submitEdited(request: Request, studyId: Long, componentId: Long)
DELETE   /jatos/:studyId/:componentId                                       @controllers.gui.Components.remove(request: Request, studyId: Long, componentId: Long)
GET      /jatos/:studyId/:componentId/run                                   @controllers.gui.Components.runComponent(request: Request, studyId: Long, componentId: Long, batchId: Long ?= -1)
GET      /jatos/:studyId/:componentId/clone                                 @controllers.gui.Components.cloneComponent(request: Request, studyId: Long, componentId: Long)

# ImportExport controller
POST     /jatos/import/study                                                @controllers.gui.ImportExport.importStudy(request: Request)
POST     /jatos/import/studyConfirmed                                       @controllers.gui.ImportExport.importStudyConfirmed(request: Request)


### Static resources ###

# General assets
GET      /assets/*file                                                      controllers.Assets.versioned(path="/public/lib/gui", file: Asset)